import {parse, stringify} from "@serial-as/json"

@serializable
class StateSchema {
  firstName: string
  lastName: string
  counter: i32
}

@serializable
class ActionSchema {
  // note: cannot be named "function", as it causes the json-as transform to explode...
  functionName: string
}

/**
 * note: this part should be generated by our own "transform" (https://www.assemblyscript.org/transforms.html)
 * during compilation - not sure though if it is possible to call multiple transforms
 * (as we're already using json-as' transform)
 *
 * @param _state
 * @param _action
 */
export function handle(_state: string, _action: string): string {
  const state = parse<StateSchema>(_state);
  const action = parse<ActionSchema>(_action);

  const result = _handle(state, action);

  return stringify(result);
}


function _handle(state: StateSchema, action: ActionSchema): StateSchema {
  if (action.functionName == "increment") {
    state.counter += 666;
  }

  return state;
}
